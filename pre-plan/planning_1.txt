Keywords: Threading process, create threads, discover mutexes, Data race, scrambled output, mutex for printing, deadlock
MUTEXES:
1 for each fork
1 for DIE
1 for PRINT
Overview: 
--1 or more philo at round table
--spaghetti in middle.
Things they can do- ONLY ONE AT A TIME:
EAT
THINK
SLEEP
forks: As many as philos
philo need 2 forks to EAT Left and right-> 2 wont be able to eat, if they smart and dont take 1 fork without being able to take the other
CYCLE: EAT->SLEEP->THINKING
ALL NEED TO EAT
NO SPEAK
DONT KNOW WHEN OTHER DIE

rules:
- no global variables
- args: 
number_of_philosophers
time to DIE in milliseconds
time to eat in milliseconds
time to sleep in milliseconds
number of times each philo eat(optional)

LOGS: (no lag more than 10ms)

◦ timestamp_in_ms X has taken a fork
◦ timestamp_in_ms X is eating
◦ timestamp_in_ms X is sleeping
◦ timestamp_in_ms X is thinking
◦ timestamp_in_ms X died

New Things: fflush(stdout);

MUTEX LOCK LOCKS NOT ONLY WRITE BUT ALSO READ
MUTEX:
DECLARE 1 MUTEX PER FORK!
Philo has left & right fork * that points to created fork mutexes!

FKTIONS: 
memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock
JOIN VS DETACH -> DETACH -> Main doesnt give a fk, join, main waits for threads to end and join. Barrier -> Waits for threads to form

MALLOC:
EACH PHILO HAS 1 LEFT AND RIGHT FORK MUTEX -> BOTH FORKS ARE SHARED WITH ADJACENT PHILOS
ONE MALLOC OF FORK MUTEXES TO HOLD 1 FORK PER PHILO

Flow: 
--argv check for right number of args --> error and invalid argument --> blanket function to handle freeing stuff
--check & parse arguments --> check for positive and also has to be more than 0
-- malloc philo num * sizeof (struct)
-- malloc philo num * fork mutex 
-- failed malloc check
-- create mutex -> fork, death, print

PROTECTS: NO PROTECTS FOR GET TIME OF DAY?

init philo FIRST Set philo id to i-> 
	set fork left & right

create thread for each philo --> Start Time (of program and of each philo)
 ----	
AVOID DEADLOCK
init ate amount and last meal (time)
---------------------------------------
init death to 0; -> 0 or 1 to represent dead or not.
-------------------TIME:-------------------
WHY I NEED current time? struct timeval time_struct; gettimeofday(&time_struct, NULL); * tv.sec * 1000 + tv.microseconds * 1000
START TIME? for what?

-- USLEEEP IN SMALL INTERVALS AND CONSTANTLY CHECK IF SLEEP IS ENOUGH
Last Meal = TIME set to current time -> init last meal time for philo.
-> Pthread create(thread -> put in pthread_t variable in each philo struc, NULL(attr), philo_routine, variable (&data->philos[i]

ALWAYS CHECK FOR FAILS (for creating thread and for create mutexes, delete/free up to then)